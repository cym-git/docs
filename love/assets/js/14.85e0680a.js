(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{305:function(e,t,r){"use strict";r.r(t);var i=r(2),a=Object(i.a)({},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"nginx"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#nginx","aria-hidden":"true"}},[e._v("#")]),e._v(" nginx")]),e._v(" "),r("h2",{attrs:{id:"安装"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#安装","aria-hidden":"true"}},[e._v("#")]),e._v(" 安装")]),e._v(" "),r("ul",[r("li",[e._v("安装就暂时略过了，记录一下配置")])]),e._v(" "),r("h2",{attrs:{id:"常用命令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#常用命令","aria-hidden":"true"}},[e._v("#")]),e._v(" 常用命令")]),e._v(" "),r("ul",[r("li",[e._v("做了软链接或者配置了 nginx 的环境变量可以用以下语法，没有话就需要指定到 nginx 所在的目录")]),e._v(" "),r("li",[r("strong",[e._v("nginx -s stop")]),e._v(" 停止 nginx")]),e._v(" "),r("li",[r("strong",[e._v("nginx -s quit")]),e._v(" 退出 nginx")]),e._v(" "),r("li",[r("strong",[e._v("nginx -s reload")]),e._v(" 重新加载配置（修改配置文件后）")]),e._v(" "),r("li",[r("strong",[e._v("nginx -s reopen")]),e._v(" 重启 nginx")]),e._v(" "),r("li",[r("strong",[e._v("nginx -v")]),e._v(" 查看版本")]),e._v(" "),r("li",[r("strong",[e._v("nginx -t")]),e._v(" 查看配置文件目录，检测配置文件是否有语法错误，然后退出")])]),e._v(" "),r("h2",{attrs:{id:"nginx-conf-配置文件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#nginx-conf-配置文件","aria-hidden":"true"}},[e._v("#")]),e._v(" nginx.conf 配置文件")]),e._v(" "),r("div",{staticClass:"tip custom-block"},[r("p",[e._v("Nginx 配置文件主要分成四部分：main（全局设置）、server（主机设置）、upstream（上游服务器设置，主要为反向代理、负载均衡相关配置）和 location（URL 匹配特定位置后的设置），每部分包含若干个指令。main 部分设置的指令将影响其它所有部分的设置；server 部分的指令主要用于指定虚拟主机域名、IP 和端口；upstream 的指令用于设置一系列的后端服务器，设置反向代理及后端服务器的负载均衡；location 部分用于匹配网页位置（比如，根目录“/”,“/images”,等等）。他们之间的关系式：server 继承 main，location 继承 server；upstream 既不会继承指令也不会被继承。它有自己的特殊指令，不需要在其他地方的应用。")])]),e._v(" "),r("h2",{attrs:{id:"main-全局配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#main-全局配置","aria-hidden":"true"}},[e._v("#")]),e._v(" main 全局配置")]),e._v(" "),r("blockquote",[r("p",[e._v("nginx 在运行时与具体业务（比如 http 服务或者 email 服务代理）无关的参数，比如工作进程数、运行身份等")])]),e._v(" "),r("h3",{attrs:{id:"woker-processes"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#woker-processes","aria-hidden":"true"}},[e._v("#")]),e._v(" woker_processes")]),e._v(" "),r("ul",[r("li",[e._v("在配置文件的顶级"),r("em",[e._v("main")]),e._v("部分，worker 角色的工作进程的个数，master 进程是接收并分配请求给 worker 处理。这个数据简单一点可以设置为 CPU 的核数 "),r("em",[e._v("grep ^processor /proc/cpuinfo | wc -l")]),e._v("，也是"),r("em",[e._v("auto")]),e._v("值。如果开启了 ssl 和 gzip 更应该设置成与逻辑 CPU 数量一样甚至为 2 倍，可以减少 I/O 操作，如果 nginx 服务器还有其他服务，可以适当减少。")])]),e._v(" "),r("h3",{attrs:{id:"worker-cpu-affinity"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#worker-cpu-affinity","aria-hidden":"true"}},[e._v("#")]),e._v(" worker_cpu_affinity")]),e._v(" "),r("ul",[r("li",[e._v("也是写在 main 部分。在高并发情况下，通过设置 cpu 粘性来降低由于多 CPU 核切换造成的寄存器等现场重建带来的性能损耗。如"),r("em",[e._v("worker_cpu_affinity 0001 0010 0100 1000")]),e._v("; （四核）。")])]),e._v(" "),r("h3",{attrs:{id:"worker-connections-2048"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#worker-connections-2048","aria-hidden":"true"}},[e._v("#")]),e._v(" worker_connections 2048")]),e._v(" "),r("ul",[r("li",[e._v("在 "),r("strong",[e._v("events")]),e._v(" 部分。每一个 worker 进程能并发处理（发起）的最大连接数（包括与客户端或后端被代理服务器间等所有的连接数）。")]),e._v(" "),r("li",[e._v("nginx 作为反向代理服务器，计算公式 _最大连接数 = worker_processes _ worker_connections / 4*，所以这里客户端最大连接数是 1024，这个可以增加到 8192 都没关系，但是不能超过后面的 *worker_rlimit_nofile*。")]),e._v(" "),r("li",[e._v("当 nginx 作为 http 服务器时，计算公式都除以 2")])]),e._v(" "),r("h3",{attrs:{id:"worker-rlimit-nofile-10240"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#worker-rlimit-nofile-10240","aria-hidden":"true"}},[e._v("#")]),e._v(" worker_rlimit_nofile 10240")]),e._v(" "),r("ul",[r("li",[e._v("写在 main 部分。默认是没有设置，可以限制为操作系统最大的限制 65535。")])]),e._v(" "),r("h3",{attrs:{id:"use-epoll"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#use-epoll","aria-hidden":"true"}},[e._v("#")]),e._v(" use epoll")]),e._v(" "),r("ul",[r("li",[e._v("写在 events 部分。在 Linux 操作系统下，nginx 默认使用 epoll 事件模型，得益于此，nginx 在 Linux 操作系统下效率相当高。同时 Nginx 在 OpenBSD 或 FreeBSD 操作系统上采用类似于 epoll 的高效事件模型 kqueue。在操作系统不支持这些高效模型时才使用 select。")])]),e._v(" "),r("h2",{attrs:{id:"http-服务器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#http-服务器","aria-hidden":"true"}},[e._v("#")]),e._v(" http 服务器")]),e._v(" "),r("blockquote",[r("p",[e._v("与提供 http 服务相关的一些配置参数。例如：是否使用"),r("em",[e._v("keeplive")]),e._v("，是否使用"),r("em",[e._v("gzip")]),e._v("进行压缩等")])]),e._v(" "),r("h3",{attrs:{id:"sendfile-on"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#sendfile-on","aria-hidden":"true"}},[e._v("#")]),e._v(" sendfile on")]),e._v(" "),r("ul",[r("li",[e._v("开启高效的文件传输模式，sendfile 指令指定 nginx 是否调用 sendfile 函数来传输文件，减少用户空间到内核空间的上下文切换。")]),e._v(" "),r("li",[e._v("对于普通应用设为 on，如果用来进行下载等应用磁盘 IO 重负载应用，可设置为 off，以平衡磁盘与网络 I/O 处理速度，减低系统的负载")])]),e._v(" "),r("h3",{attrs:{id:"keeplive-timeout-65"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#keeplive-timeout-65","aria-hidden":"true"}},[e._v("#")]),e._v(" keeplive_timeout 65")]),e._v(" "),r("ul",[r("li",[e._v("长连接超时时间，单位是秒。")]),e._v(" "),r("li",[e._v("这个参数很敏感，涉及浏览器的种类、后端服务器的超时设置、操作系统的设置，可以另外起一片文章了。长连接请求大量小文件的时候，可以减少重建连接的开销，但假如有大文件上传，65s 内没上传完成会导致失败。如果设置时间过长，用户又多，长时间保持连接会占用大量资源。")])]),e._v(" "),r("h3",{attrs:{id:"send-timeout"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#send-timeout","aria-hidden":"true"}},[e._v("#")]),e._v(" send_timeout")]),e._v(" "),r("ul",[r("li",[e._v("用于指定响应客户端的超时时间。这个超时仅限于两个连接活动之间的时间，如果超过这个时间，客户端没有任何活动，Nginx 将会关闭连接。")])]),e._v(" "),r("h3",{attrs:{id:"client-max-body-size-10m"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#client-max-body-size-10m","aria-hidden":"true"}},[e._v("#")]),e._v(" client_max_body_size 10m")]),e._v(" "),r("ul",[r("li",[e._v("允许客户端请求的最大单文件字节数。如果有上传较大文件，请设置它的限制值")])]),e._v(" "),r("h3",{attrs:{id:"client-body-buffer-size-128k"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#client-body-buffer-size-128k","aria-hidden":"true"}},[e._v("#")]),e._v(" client_body_buffer_size 128k")]),e._v(" "),r("ul",[r("li",[e._v("缓冲区代理缓冲用户端请求的最大字节数")])]),e._v(" "),r("h3",{attrs:{id:"模块-http-proxy"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#模块-http-proxy","aria-hidden":"true"}},[e._v("#")]),e._v(" 模块 http_proxy")]),e._v(" "),r("blockquote",[r("p",[e._v("这个模块实现的是 nginx 作为反向代理服务器的功能，包括缓存功能（"),r("a",{attrs:{href:"http://seanlook.com/2015/06/02/nginx-cache-check/",target:"_blank",rel:"noopener noreferrer"}},[e._v("传送门"),r("OutboundLink")],1),e._v("）")])]),e._v(" "),r("ul",[r("li",[r("p",[r("em",[e._v("proxy_connect_timeout 60")])]),e._v(" "),r("ul",[r("li",[e._v("nginx 跟后端服务器连接超时时间(代理连接超时)")])])]),e._v(" "),r("li",[r("p",[r("em",[e._v("proxy_read_timeout 60")])]),e._v(" "),r("ul",[r("li",[e._v("连接成功后，与后端服务器两个成功的响应操作之间超时时间(代理接收超时)")])])]),e._v(" "),r("li",[r("p",[r("em",[e._v("proxy_buffer_size 4k")])]),e._v(" "),r("ul",[r("li",[e._v("设置代理服务器（nginx）从后端 realserver 读取并保存用户头信息的缓冲区大小，默认与 proxy_buffers 大小相同，其实可以将这个指令值设的小一点")])])]),e._v(" "),r("li",[r("p",[r("em",[e._v("proxy_buffers 4 32k")])]),e._v(" "),r("ul",[r("li",[e._v("proxy_buffers 缓冲区，nginx 针对单个连接缓存来自后端 realserver 的响应，网页平均在 32k 以下的话，这样设置")])])]),e._v(" "),r("li",[r("p",[r("em",[e._v("proxy_busy_buffers_size 64k")])]),e._v(" "),r("ul",[r("li",[e._v("高负荷下缓冲大小（proxy_buffers*2）")])])]),e._v(" "),r("li",[r("p",[r("em",[e._v("proxy_max_temp_file_size")])]),e._v(" "),r("ul",[r("li",[e._v("当 proxy_buffers 放不下后端服务器的响应内容时，会将一部分保存到硬盘的临时文件中，这个值用来设置最大临时文件大小，默认 1024M，它与 proxy_cache 没有关系。大于这个值，将从 upstream 服务器传回。设置为 0 禁用。")])])]),e._v(" "),r("li",[r("p",[r("em",[e._v("proxy_temp_file_write_size 64k")])]),e._v(" "),r("ul",[r("li",[e._v("当缓存被代理的服务器响应到临时文件时，这个选项限制每次写临时文件的大小。proxy_temp_path（可以在编译的时候）指定写到哪那个目录。")])])]),e._v(" "),r("li",[r("p",[r("em",[e._v("proxy_pass，proxy_redirect")]),e._v(" 见 "),r("a",{attrs:{href:"#location"}},[e._v("location")]),e._v(" 部分。")])])]),e._v(" "),r("h3",{attrs:{id:"模块-http-gzip"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#模块-http-gzip","aria-hidden":"true"}},[e._v("#")]),e._v(" 模块 http_gzip")]),e._v(" "),r("ul",[r("li",[e._v("gzip on：开启 gzip 压缩输出，减少网络传输。\n"),r("ul",[r("li",[r("strong",[e._v("gzip_min_length 1k")]),e._v("：设置允许压缩的页面最小字节数，页面字节数从 header 头得 content-length 中进行获取。默认值是 20。建议设置成大于 1k 的字节数，小于 1k 可能会越压越大。")]),e._v(" "),r("li",[r("strong",[e._v("gzip_buffers 4 16k")]),e._v("：设置系统获取几个单位的缓存用于存储 gzip 的压缩结果数据流。4 16k 代表以 16k 为单位，安装原始数据大小以 16k 为单位的 4 倍申请内存。")]),e._v(" "),r("li",[r("strong",[e._v("gzip_http_version 1.0")]),e._v("：用于识别 http 协议的版本，早期的浏览器不支持 Gzip 压缩，用户就会看到乱码，所以为了支持前期版本加上了这个选项，如果你用了 Nginx 的反向代理并期望也启用 Gzip 压缩的话，由于末端通信是 http/1.0，故请设置为 1.0。")]),e._v(" "),r("li",[r("strong",[e._v("gzip_comp_level 6")]),e._v("：gzip 压缩比，1 压缩比最小处理速度最快，9 压缩比最大但处理速度最慢(传输快但比较消耗 cpu)")]),e._v(" "),r("li",[r("strong",[e._v("gzip_types")]),e._v(" ：匹配 mime 类型进行压缩，无论是否指定,”text/html”类型总是会被压缩的。")]),e._v(" "),r("li",[r("strong",[e._v("gzip_proxied any")]),e._v("：Nginx 作为反向代理的时候启用，决定开启或者关闭后端服务器返回的结果是否压缩，匹配的前提是后端服务器必须要返回包含”Via”的 header 头。")]),e._v(" "),r("li",[r("strong",[e._v("gzip_vary on")]),e._v("：和 http 头有关系，会在响应头加个 Vary: Accept-Encoding ，可以让前端的缓存服务器缓存经过 gzip 压缩的页面，例如，用 Squid 缓存经过 Nginx 压缩的数据。")])])])]),e._v(" "),r("h2",{attrs:{id:"server-虚拟主机"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#server-虚拟主机","aria-hidden":"true"}},[e._v("#")]),e._v(" server 虚拟主机")]),e._v(" "),r("div",{staticClass:"tip custom-block"},[r("p",[e._v("http 服务上支持若干个虚拟主机。每个虚拟主机一个对应的 server 配置项，配置项里面包含该虚拟主机相关的配置。在提供 mail 服务代理时，也可以建立多个 server。每个 server 通过监听地址或端口来区分")])]),e._v(" "),r("h3",{attrs:{id:"listen"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#listen","aria-hidden":"true"}},[e._v("#")]),e._v(" listen")]),e._v(" "),r("ul",[r("li",[e._v("监听端口，默认 80，小于 1024 的要以 root 启动。可以为 listen *:80、listen 127.0.0.1:80 形式。")])]),e._v(" "),r("h3",{attrs:{id:"server-name"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#server-name","aria-hidden":"true"}},[e._v("#")]),e._v(" server_name")]),e._v(" "),r("ul",[r("li",[e._v("服务器名，如 localhost、www.example.com，可以通过正则匹配")])]),e._v(" "),r("h3",{attrs:{id:"模块-http-stream"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#模块-http-stream","aria-hidden":"true"}},[e._v("#")]),e._v(" 模块 http_stream")]),e._v(" "),r("ul",[r("li",[e._v("这个模块通过一个简单的调度算法来实现客户端 IP 到后端服务器的负载均衡，upstream 后接负载均衡器的名字，后端 realserver 以 host:port options; 方式组织在 {} 中。如果后端被代理的只有一台，也可以直接写在 proxy_pass 。")])]),e._v(" "),r("h2",{attrs:{id:"location"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#location","aria-hidden":"true"}},[e._v("#")]),e._v(" location")]),e._v(" "),r("blockquote",[r("p",[e._v("http 服务中，某些特定的 URL 对应的一系列配置项。")])]),e._v(" "),r("h3",{attrs:{id:"root"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#root","aria-hidden":"true"}},[e._v("#")]),e._v(" root")]),e._v(" "),r("ul",[r("li",[e._v("root /root/project/main;")]),e._v(" "),r("li",[e._v("定义服务器的默认网站根目录位置。如果 "),r("strong",[e._v("location")]),e._v(" URL 配置的是子目录或文件，root 没什么作用，一般放在"),r("em",[e._v("server")]),e._v("指令里面或者 / 下")]),e._v(" "),r("li",[e._v("也可以写成"),r("strong",[e._v("alias")]),e._v("，来匹配，alias /root/cym/project/daily-admin/，但是 location / 不可以写成 alias，否则会是 403\n"),r("p",{attrs:{align:"center"}},[r("img",{attrs:{src:e.$withBase("/imgs/nginx-location-conf.png"),height:""}})])])]),e._v(" "),r("h3",{attrs:{id:"index"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#index","aria-hidden":"true"}},[e._v("#")]),e._v(" index;")]),e._v(" "),r("ul",[r("li",[e._v("index index.html index.htm;")]),e._v(" "),r("li",[e._v("定义路径下默认访问的文件名")])]),e._v(" "),r("h3",{attrs:{id:"proxy-pass"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#proxy-pass","aria-hidden":"true"}},[e._v("#")]),e._v(" proxy_pass")]),e._v(" "),r("ul",[r("li",[r("p",[e._v("proxy_pass http://127.0.0.1:3000/api/;")])]),e._v(" "),r("li",[r("p",[e._v("请求转向 "),r("em",[e._v("http://127.0.0.1:3000/api/")]),e._v("，即反向代理，对应"),r("em",[e._v("upstream")]),e._v("负载均衡器")])]),e._v(" "),r("li",[r("p",[e._v("proxy_pass http://wanfangdata.com.cn/;")])]),e._v(" "),r("li",[r("p",[e._v("访问代理到 "),r("em",[e._v("http://wanfangdata.com.cn/")]),e._v(" 网站")])]),e._v(" "),r("li",[r("p",[e._v("关于 location 匹配规则的写法，可以说尤为关键且基础的，参考文章 "),r("a",{attrs:{href:"http://seanlook.com/2015/05/17/nginx-location-rewrite/",target:"_blank",rel:"noopener noreferrer"}},[e._v("nginx 配置 location 总结及 rewrite 规则写法"),r("OutboundLink")],1),e._v(";")])]),e._v(" "),r("li",[r("p",[r("a",{attrs:{href:"http://seanlook.com/2015/05/17/nginx-install-and-config/",target:"_blank",rel:"noopener noreferrer"}},[e._v("本文章参考 "),r("em",[e._v("seanlook")]),e._v(" 的笔记"),r("OutboundLink")],1)])])])])},[],!1,null,null,null);t.default=a.exports}}]);