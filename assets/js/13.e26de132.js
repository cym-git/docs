(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{267:function(_,v,t){"use strict";t.r(v);var s=t(0),r=Object(s.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h2",{attrs:{id:"简单流程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#简单流程"}},[_._v("#")]),_._v(" 简单流程")]),_._v(" "),v("blockquote",[v("p",[_._v("从输入 url 到页面呈现会经过几个步骤：DNS 解析 -> TCP 连接 -> 发送 HTTP 请求 -> 服务器处理请求并返回 -> 浏览器解析渲染页面 -> TCP 断开连接")])]),_._v(" "),v("h2",{attrs:{id:"url"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#url"}},[_._v("#")]),_._v(" URL")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("URL")]),_._v("（"),v("em",[_._v("Uniform Resource Locator")]),_._v("），统一资源定位符，用于定位互联网上资源，俗称网址")]),_._v(" "),v("li",[_._v("一个基本的"),v("strong",[_._v("URL")]),_._v("由以下几部分组成\n"),v("ol",[v("li",[_._v("协议部分（"),v("em",[_._v("protocol")]),_._v("）：常见的协议有 "),v("em",[_._v("http、https、ftp、file")]),_._v("，其中最常见的类型是 "),v("em",[_._v("http")]),_._v("，而 "),v("em",[_._v("https")]),_._v(" 则是进行加密的网络传输")]),_._v(" "),v("li",[_._v("域名部分（"),v("em",[_._v("domain")]),_._v("）：该 URL 的域名部分为 "),v("em",[_._v("www.aspxfans.com")]),_._v("。一个 URL 中，也可以使用 IP 地址作为域名使用，"),v("em",[_._v("www")]),_._v(" 也是 "),v("em",[_._v("http")]),_._v(" 的默认主机（"),v("em",[_._v("host")]),_._v("）")]),_._v(" "),v("li",[_._v("端口部分（"),v("em",[_._v("port")]),_._v("）：跟在域名后面的是端口，域名和端口之间使用"),v("code",[_._v(":")]),_._v("作为分隔符，端口省略则默认为"),v("em",[_._v("80")])]),_._v(" "),v("li",[_._v("目录部分（"),v("em",[_._v("pathname")]),_._v("）：定义服务器上的路径（如果省略，则文档必须位于网站的根目录中）")]),_._v(" "),v("li",[_._v("参数部分（"),v("em",[_._v("search")]),_._v("）：从"),v("code",[_._v("?")]),_._v("开始到"),v("code",[_._v("#")]),_._v("为止之间的部分为参数部分，又称搜索部分、查询部分，参数可以允许有多个参数，参数与参数之间用"),v("code",[_._v("&")]),_._v("作为分隔符。")])])])]),_._v(" "),v("h2",{attrs:{id:"域名解析-dns"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#域名解析-dns"}},[_._v("#")]),_._v(" 域名解析（DNS）")]),_._v(" "),v("blockquote",[v("p",[_._v("在浏览器输入网址后，首先要经过域名解析，因为不可能直接通过域名找到对应的服务器，而是要通过 "),v("em",[_._v("IP")]),_._v(" 地址")])]),_._v(" "),v("h3",{attrs:{id:"什么是域名解析"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#什么是域名解析"}},[_._v("#")]),_._v(" 什么是域名解析")]),_._v(" "),v("blockquote",[v("p",[v("em",[_._v("DNS")]),_._v(" 协议提供通过域名查找 "),v("em",[_._v("IP")]),_._v(" 地址，或者逆向从 "),v("em",[_._v("IP")]),_._v(" 地址反查询域名的服务。"),v("em",[_._v("DNS")]),_._v(" 是一个网络服务器，我们的域名解析简单来说就是在 "),v("em",[_._v("DNS")]),_._v(" 上记录一条信息\n例如："),v("code",[_._v("baidu.com 220.114.23.56（服务器外网 IP 地址）80（服务器端口号）")])])]),_._v(" "),v("h3",{attrs:{id:"浏览器如何通过域名去查询-url-对应的-ip"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#浏览器如何通过域名去查询-url-对应的-ip"}},[_._v("#")]),_._v(" 浏览器如何通过域名去查询 URL 对应的 IP")]),_._v(" "),v("ul",[v("li",[v("p",[_._v("浏览器缓存：浏览器会按照一定的频率缓存 "),v("em",[_._v("DNS")]),_._v(" 记录（缓存时间比较短，大概只有 1 分钟，且只能容纳 1000 条缓存）")]),_._v(" "),v("ul",[v("li",[_._v("chrome 的 dns 缓存："),v("code",[_._v("chrome://net-internals/#dns")])])])]),_._v(" "),v("li",[v("p",[_._v("操作系统缓存：如果浏览器缓存中找不到需要的 DNS 记录，那就去操作系统中找。")]),_._v(" "),v("ul",[v("li",[_._v("如果在 "),v("em",[_._v("Windows")]),_._v(" 系统的"),v("strong",[_._v("DN")]),_._v("S 缓存也没有找到，那么尝试读取"),v("strong",[_._v("hosts")]),_._v("文件")]),_._v(" "),v("li",[_._v("介绍下"),v("strong",[_._v("hosts")]),_._v("：")]),_._v(" "),v("li",[_._v("为了提高对经常访问的网络域名的解析效率，可以通过利用 "),v("em",[_._v("hosts")]),_._v(" 文件中建立域名和 IP 的映射关系来达到目的")]),_._v(" "),v("li",[_._v("在进行 "),v("em",[_._v("DNS")]),_._v(" 请求以前，"),v("em",[_._v("Windows")]),_._v(" 系统会先检查自己 "),v("em",[_._v("hosts")]),_._v(" 文件中是否有这个网路域名映射关系，"),v("em",[_._v("hosts")]),_._v(" 文件请求级别高于 "),v("em",[_._v("DNS")])]),_._v(" "),v("li",[v("em",[_._v("hosts")]),_._v(" 文件位置："),v("code",[_._v("C:\\Windows\\System32\\drivers\\etc")])])])]),_._v(" "),v("li",[v("p",[_._v("路由缓存：路由器中也有 "),v("em",[_._v("DNS")]),_._v(" 缓存")])]),_._v(" "),v("li",[v("p",[v("strong",[_._v("ISP")]),_._v("的"),v("strong",[_._v("DNS")]),_._v("服务器："),v("strong",[_._v("ISP")]),_._v("是互联网服务提供商（"),v("em",[_._v("Internet Service Provider")]),_._v("）的简称，"),v("strong",[_._v("ISP")]),_._v("有专门的"),v("strong",[_._v("DNS")]),_._v("服务器应对"),v("strong",[_._v("DNS")]),_._v("请求")])]),_._v(" "),v("li",[v("p",[_._v("根服务器："),v("strong",[_._v("ISP")]),_._v("的"),v("strong",[_._v("DNS")]),_._v("还找不到的话，就会向根服务器发起请求，进行递归查询（"),v("em",[_._v("DNS")]),_._v(" 服务器先问根域名服务器 "),v("code",[_._v("主域(com)")]),_._v(" 名服务器的 IP 地址，然后在问"),v("code",[_._v("子域")]),_._v("的 IP 地址）")])]),_._v(" "),v("li",[v("p",[_._v("浏览器通过向"),v("strong",[_._v("DNS")]),_._v("服务器发送域名，"),v("strong",[_._v("DNS")]),_._v("服务器查询到与域名相对应的"),v("strong",[_._v("IP")]),_._v("地址，然后返回给浏览器，浏览器再将 IP 地址打在协议上，同时请求参数也会在协议搭载，然后一并发送给服务器")])])]),_._v(" "),v("h2",{attrs:{id:"tcp-三次握手"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp-三次握手"}},[_._v("#")]),_._v(" TCP 三次握手")]),_._v(" "),v("blockquote",[v("p",[_._v("在客户端发送数据之前会发起 TCP 三次握手用以同步客户端和服务端的序列号和确认号，并交换 TCP 窗口大小信息。")]),_._v(" "),v("ul",[v("li",[_._v("客户端发送一个带"),v("strong",[_._v("SYN=1，Seq=X")]),_._v("的数据包到服务器（第一次握手，由浏览器发起，告诉服务器我要发送请求了）")]),_._v(" "),v("li",[_._v("服务器返回一个带"),v("strong",[_._v("SYN=1，ACK=X+1，Seq=Y")]),_._v("的响应以表示确认信息（第二次握手，由服务器发起，告诉浏览器我准备接收了，你赶紧发送吧）")]),_._v(" "),v("li",[_._v("客户端再回传一个带"),v("strong",[_._v("ACK=Y+1，Seq=Z")]),_._v("的数据包，代表握手结束（第三次握手，由浏览器发送，告诉服务器，我马上就发送了，准备接收吧）")]),_._v(" "),v("li",[_._v("为什么要三次握手？为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误。")])])]),_._v(" "),v("p",{staticClass:"p-images",attrs:{align:"center"}},[v("img",{attrs:{src:_.$withBase("/imgs/process-tcp-three-1.png")}})]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("客户端")]),_._v("首先发送一个连接试探，ACK=0 表示确认号无效，SYN = 1 表示这是一个连接请求或连接接受报文，同时表示这个数据报不能携带数据，seq = x 表示"),v("strong",[_._v("客户端")]),_._v("自己的初始序号（seq = 0 就代表这是第 0 号帧），这时候"),v("strong",[_._v("客户端")]),_._v("进入 syn_sent 状态，表示客户端等待服务器的回复")]),_._v(" "),v("li",[v("strong",[_._v("服务器")]),_._v("监听到连接请求报文后，如同意建立连接，则向"),v("strong",[_._v("客户端")]),_._v("发送确认。TCP 报文首部中的 SYN 和 ACK 都置 1 ，ack = x + 1 表示期望收到对方下一个报文段的第一个数据字节序号是 x+1，同时表明 x 为止的所有数据都已正确收到（ack=1 其实是 ack=0+1,也就是期望客户端的第 1 个帧），seq = y 表示"),v("strong",[_._v("服务器")]),_._v("自己的初始序号（seq=0 就代表这是服务器这边发出的第 0 号帧）。这时服务器进入 syn_rcvd，表示服务器已经收到"),v("strong",[_._v("客户端")]),_._v("的连接请求，等待"),v("strong",[_._v("客户端")]),_._v("的确认。")]),_._v(" "),v("li",[v("strong",[_._v("客户端")]),_._v("收到确认后还需再次发送确认，同时携带要发送给"),v("strong",[_._v("服务器")]),_._v("的数据。ACK 置 1 表示确认号 ack= y + 1 有效（代表期望收到服务器的第 1 个帧），"),v("strong",[_._v("客户端")]),_._v("自己的序号 seq= x + 1（表示这就是我的第 1 个帧，相对于第 0 个帧来说的），一旦收到"),v("strong",[_._v("客户端")]),_._v("的确认之后，这个 TCP 连接就进入 Established 状态，就可以发起 http 请求了。")])]),_._v(" "),v("p",{staticClass:"p-images",attrs:{align:"center"}},[v("img",{attrs:{src:_.$withBase("/imgs/process-tcp-three-2.png")}})]),_._v(" "),v("h2",{attrs:{id:"发送-http-请求"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#发送-http-请求"}},[_._v("#")]),_._v(" 发送 HTTP 请求")]),_._v(" "),v("blockquote",[v("p",[_._v("TCP 三次握手结束后，开始发送"),v("strong",[_._v("HTTP")]),_._v("请求报文\n请求报文由请求行、请求头、请求体三部分组成")])]),_._v(" "),v("ul",[v("li",[_._v("请求行包含请求方法、url、协议版本\n"),v("ul",[v("li",[_._v("请求方法包含 8 中："),v("em",[_._v("GET、POST、PUT、DELETE、PATCH、HEAD、OPTIONS、TRACE")])]),_._v(" "),v("li",[_._v("url 就是请求地址：由 <协议>：//<主机>：<端口>/<路径>?<参数> 组成")]),_._v(" "),v("li",[_._v("协议版本就是 "),v("em",[_._v("http")]),_._v(" 版本号")])])]),_._v(" "),v("li",[_._v("请求头包含附加信息，由键值对组成，每行一对")]),_._v(" "),v("li",[_._v("请求体，就是前端的请求参数，不是所有的请求都具有请求数据的")])]),_._v(" "),v("h2",{attrs:{id:"服务器处理请求并返回-http-报文"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#服务器处理请求并返回-http-报文"}},[_._v("#")]),_._v(" 服务器处理请求并返回 HTTP 报文")]),_._v(" "),v("ul",[v("li",[_._v("响应报文由响应行、响应头、响应主体三个部分组成")]),_._v(" "),v("li",[_._v("响应行包括：协议版本、状态码、状态描述\n"),v("ul",[v("li",[_._v("状态码规则：")]),_._v(" "),v("li",[_._v("1xx：指示信息--表示请求已接收，继续处理")]),_._v(" "),v("li",[_._v("2xx：成功--表示请求已被成功接收、理解、接受")]),_._v(" "),v("li",[_._v("3xx：重定向--要完成请求必须进行更进一步的操作")]),_._v(" "),v("li",[_._v("4xx：客户端错误--请求有语法错误或请求无法实现")]),_._v(" "),v("li",[_._v("5xx：服务器端错误--服务器未能实现合法的请求")])])]),_._v(" "),v("li",[_._v("响应头包含响应报文的附加信息，由键值对组成")]),_._v(" "),v("li",[_._v("响应体就是后台返回的数据，并不是所有响应报文都有响应数据")]),_._v(" "),v("li",[_._v("服务器端 WEB 程序接收到 http 请求以后，就开始处理该请求，处理之后就返回给浏览器 html 文件。")])]),_._v(" "),v("h2",{attrs:{id:"浏览器解析渲染页面"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#浏览器解析渲染页面"}},[_._v("#")]),_._v(" 浏览器解析渲染页面")]),_._v(" "),v("blockquote",[v("p",[_._v("浏览器拿到响应后来的 "),v("strong",[_._v("HTML")]),_._v(" 后，就开始解析其中的 html 代码，浏览器解析渲染页面分为一下五个步骤：")]),_._v(" "),v("ul",[v("li",[_._v("根据 HTML 解析出 DOM 树")]),_._v(" "),v("li",[_._v("根据 CSS 解析生成 CSS 规则树")]),_._v(" "),v("li",[_._v("根据 DOM 树和 CSS 规则树生成渲染树")]),_._v(" "),v("li",[_._v("根据渲染树计算每个节点的信息")]),_._v(" "),v("li",[_._v("根据计算好的信息绘制页面")])])]),_._v(" "),v("h3",{attrs:{id:"根据-html-解析出-dom-树"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#根据-html-解析出-dom-树"}},[_._v("#")]),_._v(" 根据 HTML 解析出 DOM 树")]),_._v(" "),v("ul",[v("li",[_._v("根据 HTML 的内容，讲标签按照结构解析成为 DOM 树，DOM 树解析的过程是一个深度优先遍历。即构建完当前节点的所有子节点，在构建下一个兄弟节点")]),_._v(" "),v("li",[_._v("在读取 HTML 文档，构建 DOM 树的过程中，若遇到"),v("strong",[_._v("script")]),_._v("标签，则 DOM 树的构建就会暂停，直到脚本执行完毕")])]),_._v(" "),v("h3",{attrs:{id:"根据-css-解析生成-css-规则树"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#根据-css-解析生成-css-规则树"}},[_._v("#")]),_._v(" 根据 CSS 解析生成 CSS 规则树")]),_._v(" "),v("ul",[v("li",[_._v("解析 CSS 规则树时，"),v("strong",[_._v("js")]),_._v("的执行将暂停，直至 CSS 规则树就绪。"),v("RouterLink",{attrs:{to:"/views/basis/css.html#css-加载会造成阻塞吗"}},[_._v("查看细节")])],1),_._v(" "),v("li",[_._v("浏览器就 CSS 规则树生成之前不渲染")])]),_._v(" "),v("h3",{attrs:{id:"根据-dom-树和-css-规则树生成渲染树"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#根据-dom-树和-css-规则树生成渲染树"}},[_._v("#")]),_._v(" 根据 DOM 树和 CSS 规则树生成渲染树")]),_._v(" "),v("ul",[v("li",[_._v("DOM 树和 CSS 规则树全部准备好了以后，浏览器才会开始构建渲染树。")]),_._v(" "),v("li",[_._v("精简 CSS 并可以加快 CSS 规则树的构建，从而加快页面相应速度。")])]),_._v(" "),v("h3",{attrs:{id:"根据渲染树计算每一个节点的信息"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#根据渲染树计算每一个节点的信息"}},[_._v("#")]),_._v(" 根据渲染树计算每一个节点的信息")]),_._v(" "),v("ul",[v("li",[_._v("布局：通过渲染树中渲染对象的信息，计算出每一个渲染对象的位置和尺寸")]),_._v(" "),v("li",[_._v("回流：在布局完成后，发现了某个部分发生了变化影响了布局，那就需要倒回去重新渲染。")])]),_._v(" "),v("h3",{attrs:{id:"根据计算好的信息绘制页面"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#根据计算好的信息绘制页面"}},[_._v("#")]),_._v(" 根据计算好的信息绘制页面")]),_._v(" "),v("ul",[v("li",[_._v("绘制阶段，系统会遍历呈现树，并调用呈现器的“paint”方法，将呈现器的内容显示在屏幕上。")]),_._v(" "),v("li",[_._v("重绘：某个元素的背景颜色，文字颜色等，不影响元素周围或内部布局的属性，将只会引起浏览器的重绘。")]),_._v(" "),v("li",[_._v("回流：某个元素的尺寸发生了变化，则需重新计算渲染树，重新渲染。")])]),_._v(" "),v("h2",{attrs:{id:"断开连接"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#断开连接"}},[_._v("#")]),_._v(" 断开连接")]),_._v(" "),v("blockquote",[v("p",[_._v("当数据传送完毕，需要断开 tcp 连接，此时发起 tcp 四次挥手。")]),_._v(" "),v("ul",[v("li",[_._v("发起方向被动方发送报文，Fin、Ack、Seq，表示已经没有数据传输了。并进入 FIN_WAIT_1 状态。(第一次挥手：由浏览器发起的，发送给服务器，我请求报文发送完了，你准备关闭吧)")]),_._v(" "),v("li",[_._v("被动方发送报文，Ack、Seq，表示同意关闭请求。此时主机发起方进入 FIN_WAIT_2 状态。(第二次挥手：由服务器发起的，告诉浏览器，我请求报文接受完了，我准备关闭了，你也准备吧)")]),_._v(" "),v("li",[_._v("被动方向发起方发送报文段，Fin、Ack、Seq，请求关闭连接。并进入 LAST_ACK 状态。(第三次挥手：由服务器发起，告诉浏览器，我响应报文发送完了，你准备关闭吧)")]),_._v(" "),v("li",[_._v("发起方向被动方发送报文段，Ack、Seq。然后进入等待 TIME_WAIT 状态。被动方收到发起方的报文段以后关闭连接。发起方等待一定时间未收到回复，则正常关闭。(第四次挥手：由浏览器发起，告诉服务器，我响应报文接受完了，我准备关闭了，你也准备吧)")])])]),_._v(" "),v("p",{staticClass:"p-images",attrs:{align:"center"}},[v("img",{attrs:{src:_.$withBase("/imgs/process-tcp-four-1.png")}})]),_._v(" "),v("p",{staticClass:"p-images",attrs:{align:"center"}},[v("img",{attrs:{src:_.$withBase("/imgs/process-tcp-four-2.png")}})]),_._v(" "),v("ul",[v("li",[_._v("断开连接端可以是客户端，也可以是"),v("strong",[_._v("服务端")]),_._v("。假设"),v("strong",[_._v("客户端")]),_._v("发起中断连接请求：")]),_._v(" "),v("li",[_._v("第一次挥手："),v("strong",[_._v("客户端")]),_._v("先发送 FIN 报文（第 24 帧），用来关闭主动方到被动关闭方的数据传送，也就是"),v("strong",[_._v("客户端")]),_._v("告诉服务器：我已经不会再给你发数据了(当然，在 fin 包之前发送出去的数据，如果没有收到对应的 ack 确认报文，"),v("strong",[_._v("客户端")]),_._v("依然会重发这些数据)，但此时"),v("strong",[_._v("客户端")]),_._v("还可以接受数据。")]),_._v(" "),v("li",[_._v("第二次挥手："),v("strong",[_._v("服务端")]),_._v("接到 FIN 报文后，但是如果还有数据没有发送完成，则不必急着关闭 Socket，可以继续发送数据。所以服务器端先发送 ACK（第 25 帧），告诉"),v("strong",[_._v("客户端")]),_._v("：请求已经收到了，但是我还没准备好，请继续等待停止的消息。这个时候"),v("strong",[_._v("客户端")]),_._v("就进入 FIN_WAIT 状态，继续等待"),v("strong",[_._v("服务端")]),_._v("的 FIN 报文。")]),_._v(" "),v("li",[_._v("第三次挥手：当"),v("strong",[_._v("服务端")]),_._v("确定数据已发送完成，则向"),v("strong",[_._v("客户端")]),_._v("发送 FIN 报文（第 26 帧），告诉"),v("strong",[_._v("客户端")]),_._v("：服务器这边数据发完了，准备好关闭连接了。")]),_._v(" "),v("li",[_._v("第四次挥手："),v("strong",[_._v("客户端")]),_._v("收到 FIN 报文后，就知道可以关闭连接了，但是他还是不相信网络，所以发送 ACK 后进入 TIME_WAIT 状态（第 27 帧）， "),v("strong",[_._v("服务端")]),_._v("收到 ACK 后，就知道可以断开连接了。"),v("strong",[_._v("客户端")]),_._v("等待了 2MSL 后依然没有收到回复，则证明"),v("strong",[_._v("服务端")]),_._v("已正常关闭，最后，"),v("strong",[_._v("客户端")]),_._v("也可以关闭连接了至此，TCP 连接就已经完全关闭了！")])]),_._v(" "),v("h2",{attrs:{id:"参考文章"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#参考文章"}},[_._v("#")]),_._v(" 参考文章")]),_._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/57895541",target:"_blank",rel:"noopener noreferrer"}},[_._v("经典面试题：从 URL 输入到页面展现到底发生什么？"),v("OutboundLink")],1)]),_._v(" "),v("li",[v("a",{attrs:{href:"https://blog.csdn.net/sinat_21455985/article/details/53508115",target:"_blank",rel:"noopener noreferrer"}},[_._v("访问 Web，tcp 传输全过程（三次握手、请求、数据传输、四次挥手）"),v("OutboundLink")],1)])])])}),[],!1,null,null,null);v.default=r.exports}}]);